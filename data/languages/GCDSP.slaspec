# sleigh specification file for Intel 8085

define endian=little;
define alignment=2;

define space ram      type=ram_space      size=2 wordsize=2 default;
define space register type=register_space size=1 wordsize=2;

define register offset=0x00 size=2 [ ar0 ar1 ar2 ar3 ]; # Addressing registers
define register offset=0x08 size=2 [ ix0 ix1 ix2 ix3 ]; # Indexing registers
define register offset=0x10 size=2 [ r08 r09 r0A r0B ]; # Not listed with separate names
define register offset=0x18 size=2 [ st0 st1 st2 st3 ]; # Stack-related registers
define register offset=0x20 size=2 [ ac0.h ac1.h ]; # 40-bit accumulators
define register offset=0x24 size=2 [ config sr ];
define register offset=0x28 size=2 [ prod.l prod.m1 prod.h prod.m2 ]; # Product
define register offset=0x30 size=2 [ ax0.l ax0.h ax1.l ax1.h ]; # 32-bit accumulators
define register offset=0x38 size=2 [ ac0.l ac1.l ac0.m ac1.m ]; # 40-bit accumulators

define token opbyte (16)
	op0_4  = (0, 3)
	op4_8  = (4, 7)
	op5_8  = (5, 7)
	op8_16 = (8, 15)

	reg0_5 = (0, 4)

	ar0_2 = (0, 1)

	ix2_4 = (2, 3)
	op2_4 = (2, 3)
;

define token data16 (16)
   imm16 = (0,15)
;

Addr16: imm16 is imm16 { export imm16; }
Imm16: "#"^imm16 is imm16 { export imm16; }
Mem16: "@"^imm16 is imm16 { export *:2 imm16; }

attach variables [ reg0_5 ] [
	ar0 ar1 ar2 ar3
	ix0 ix1 ix2 ix3
	r08 r09 r0A r0B
	st0 st1 st2 st3
	ac0.h ac1.h
	config sr
	prod.l prod.m1 prod.h prod.m2
	ax0.l ax0.h ax1.l ax1.h
	ac0.l ac1.l ac0.m ac1.m
];

attach variables [ ar0_2 ] [ ar0 ar1 ar2 ar3 ];
attach variables [ ix2_4 ] [ ix0 ix1 ix2 ix3 ];

:NOP is op0_4=0 & op4_8=0 & op8_16=0 {
}

:DAR ar0_2 is ar0_2 & op2_4=0b01 & op4_8=0 & op8_16=0 {
	ar0_2 = ar0_2 - 1;
}

:IAR ar0_2 is ar0_2 & op2_4=0b10 & op4_8=0 & op8_16=0 {
	ar0_2 = ar0_2 - 1;
}

# No instruction with op2_4=0b11 & op4_8=0 & op8_16=0

:IAR ar0_2, ix2_4 is ar0_2 & ix2_4 & op4_8=0b0001 & op8_16=0 {
	ar0_2 = ar0_2 + ix2_4;
}

:HALT is op0_4=0b0001 & op4_8=0b0010 & op8_16=0 unimpl

:LOOP reg0_5          is reg0_5 & op5_8=0b010 & op8_16=0 unimpl
:BLOOP reg0_5, Addr16 is reg0_5 & op5_8=0b011 & op8_16=0; Addr16 unimpl

:LRI reg0_5, Imm16 is reg0_5 & op5_8=0b100 & op8_16=0; Imm16 {
	reg0_5 = Imm16;
	# "Perform an additional operation depending on destination register"
}

# No instruction with op5_8=0b101 & op8_16=0

:LR reg0_5, Mem16 is reg0_5 & op5_8=0b110 & op8_16=0; Mem16 {
	reg0_5 = Mem16;
	# "Perform an additional operation depending on destination register"
}

:SR reg0_5, Mem16 is reg0_5 & op5_8=0b111 & op8_16=0; Mem16 {
	Mem16 = reg0_5;
	# "Perform an additional operation depending on destination register"
}
